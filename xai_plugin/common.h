#ifndef _COMMON_H_
#define _COMMON_H_

#include <assert.h>
#include <inttypes.h>
#include <errno.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#define KERNEL_BASE					0x8000000000000000ULL
#define KERNEL_ADDRESS(x)			(KERNEL_BASE | (uint32_t)(x))
#define SYSCALL_OPD_PTR_OFFSET(n)	(SYSCALL_TABLE_OFFSET + (n) * sizeof(uint64_t))
#define SYSCALL_OPD_OFFSET(n)		peekq(SYSCALL_OPD_PTR_OFFSET(n))
#define SYSCALL_CODE_OFFSET(n)		peekq(SYSCALL_OPD_OFFSET(n))

#define EID_ROOT_KEY_SIZE			0x30

/* Firmware specific defines */
#define DISABLED					0xFFFFFFFF80010003ULL

#define CEX_OFFSET 					0x80000000002ED818ULL
#define DEX_OFFSET 					0x800000000030F3B0ULL

#define CEX 						0x43455800
#define DEX 						0x44455800
 
#define HTAB_PROTECTION_OFFSET		0x80000000002DD70CULL // LV1
#define HTAB_PROTECTION_PATCH		0x60000000E97F00A8ULL // LV1

#define MAP1_OFFSET					0x80000000002DCF54ULL // LV1
#define MAP1_PATCH					0x6000000048000028ULL // LV1

#define MAP2_OFFSET					0x80000000002DD284ULL // LV1
#define MAP2_PATCH					0x392000014BFFFBFDULL // LV1

#define SPE_REGISTER_OFFSET			0x80000000002F9EB8ULL // LV1
#define SPE_REGISTER_PATCH			0x3920FFFFE9430000ULL // LV1

#define PERMISSION_OFFSET			0x8000000000003D90ULL // LV2
#define PERMISSION_PATCH			0x386000014E800020ULL // LV2

#define OPD_OFFSET					KERNEL_ADDRESS(0x1630) // LV2

#define TOC_OFFSET_CEX				KERNEL_ADDRESS(0x34FBB0)
#define TOC_OFFSET_DEX				KERNEL_ADDRESS(0x3759C0)

#define SYSCALL_TABLE_OFFSET_CEX	KERNEL_ADDRESS(0x363BE0)
#define SYSCALL_TABLE_OFFSET_DEX	KERNEL_ADDRESS(0x38A4E8)

#define PAYLOAD_OFFSET				KERNEL_ADDRESS(0x7F0000)
//#define PAYLOAD_OPD_OFFSET			KERNEL_ADDRESS(0x1630)

#define HTAB_BASE					KERNEL_ADDRESS(0xF000000)
#define HTAB_SIZE					0x40000ULL
#define HTAB_ENTRY_SIZE				0x10

#define SYSCALL_RUN_PAYLOAD			32
#define SYSCALL_HVC_REDIRECTOR		811

extern uint64_t TOC_OFFSET;
extern uint64_t SYSCALL_TABLE_OFFSET;

#endif
